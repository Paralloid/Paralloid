#!/bin/sh

set -x

export PATH=/bin:/sbin

mount -o move /dev /target_tmp/dev
mount -o move /proc /target_tmp/proc
mount -o move /sys /target_tmp/sys
mount -o move /mnt /target_tmp/mnt
mount -o move /debug_ramdisk /target_tmp/debug_ramdisk
mount -o move /metadata /target_tmp/metadata
mount -o move /vendor /target_tmp/vendor
mount -o move /odm /target_tmp/odm
mount -o move /apex /target_tmp/apex
mount -o move /prism /target_tmp/prism
mount -o move /optics /target_tmp/optics
#TODO: Other mount points for non-GSI (system_ext? product?) + Device-specific (prism,optics)

mount -t proc none /proc
mount -t sysfs none /sys
mount -t configfs none /config
mount -t tmpfs none /dev
mount -t tmpfs none /tmp
mount -t pstore none /sys/fs/pstore

mdev -s
mdev -d

gadget=/config/usb_gadget/g1
echo > $gadget/UDC
rm -Rf $gadget/configs
rm -Rf $gadget/configs
mkdir $gadget
echo 0x12d1 > $gadget/idVendor
echo 0x103A > $gadget/idProduct
echo 12D1 > /sys/class/android_usb/android0/idVendor
echo 103A > /sys/class/android_usb/android0/idProduct
echo phh > /sys/class/android_usb/android0/iManufacturer
echo phh > /sys/class/android_usb/android0/iProduct
echo phh > /sys/class/android_usb/android0/iSerial
mkdir -p $gadget/strings/0x409
echo phh > $gadget/strings/0x409/serialnumber
echo phh > $gadget/strings/0x409/manufacturer
echo phh > $gadget/strings/0x409/product

# Configure the gadget with all the functions
mkdir $gadget/configs/c.1/
mkdir $gadget/configs/c.1/strings/0x409
# This name is important, see SM-A515F's kernel source, drivers/usb/gadget/configfs.c @check_symboliclink_change_mode
echo 'Conf 1' > $gadget/configs/c.1/strings/0x409/configuration

gadgetNr=1
addGadget() {
    d=$gadget/functions/${1}.0
    t=$gadget/configs/c.1/f$gadgetNr
    mkdir $d
    if [ -d $d ];then
        echo "Adding $d to $t" > /dev/kmsg
        if ln -s $d $t;then
            echo ...Succeeded > /dev/kmsg
        else
            sh -c "mkdir $d; mkdir $gadget/configs/c.1; ln -s $d $t" > /dev/kmsg 2>&1
            echo ...Failed > /dev/kmsg
        fi
        gadgetNr=$((gadgetNr+1))
    else
        echo "Failed adding $d" > /dev/kmsg
    fi
}

addGadget acm
addGadget rndis

# Setup mass_storage with current dmesg + pstore
addGadget mass_storage
echo 1 > $gadget/functions/mass_storage.0/lun.0/removable
dmesg > /tmp/tmp-img
cat /sys/fs/pstore/* >> /tmp/tmp-img
echo /tmp/tmp-img > $gadget/functions/mass_storage.0/lun.0/file

echo Functions > /dev/kmsg
ls -l $gadget/functions/c.1 > /dev/kmsg
echo Configs > /dev/kmsg
ls -l $gadget/configs/c.1 > /dev/kmsg

# Disable watchdogs
echo -n V > /dev/watchdog
echo -n V > /dev/watchdog0
echo -n V > /dev/watchdog1
echo 0 > /proc/sys/kernel/hung_task_timeout_secs

echo Functions > /dev/kmsg
ls -l $gadget/functions/c.1 > /dev/kmsg
echo Configs > /dev/kmsg
ls -l $gadget/configs/c.1 > /dev/kmsg

#echo > $gadget/UDC
echo acm,rndis > /sys/class/android_usb/android0/functions
ls /sys/class/udc |head -n 1  | cat > $gadget/UDC
echo 1 > /sys/devices/virtual/android_usb/android0/enable
echo 2 > /sys/devices/virtual/android_usb/android0/port_mode

ifconfig -a

ifconfig lo 127.0.0.1 up
ifconfig ncm0 192.168.2.3 up
ifconfig usb0 192.168.2.3 up
ifconfig rndis0 192.168.2.3 up
ifconfig $(cat $gadget/functions/ncm.0/ifname) 192.168.2.3 up

(
set +x
while ! [ -f /dev/booting ];do
echo > $gadget/functions/mass_storage.0/lun.0/file
dmesg > /tmp/tmp-img
cat /sys/fs/pstore/* >> /tmp/tmp-img
echo /tmp/tmp-img > $gadget/functions/mass_storage.0/lun.0/file
sleep 2
done) &

(
while ! [ -f /dev/booting ];do
    sh <> /dev/ttyGS0 >&0 2>&1
done
) &

refreshMapper() {
    mkdir -p /dev/block/mapper
    ln -s /dev/mapper/control /dev/device-mapper
    for i in $(cd /sys/devices/virtual/block/; echo dm-*);do
        name=$(cat /sys/devices/virtual/block/$i/dm/name)
        ln -sf /dev/$i /dev/block/mapper/$name
    done
}

refreshMapper

PARTNAME=""
DEVNAME=""
mkdir -p /dev/block/by-name
for i in $(cd /sys/dev/block; echo *);do
    U=/sys/dev/block/$i/uevent
    PARTNAME=$(sed -nE 's/PARTNAME=//p' $U)
    DEVNAME=$(sed -nE 's/DEVNAME=//p' $U)
    if [ -n "$PARTNAME" ] && [ -n "$DEVNAME" ];then
        ln -s /dev/$DEVNAME /dev/block/by-name/$PARTNAME
    fi
    PARTNAME=""
    DEVNAME=""
done


foundTarget=false

mkdir /dev/targetInternal
if [ -b /dev/block/mapper/system_phh ];then
    mount -o ro /dev/block/mapper/system_phh /dev/targetInternal
fi

mkdir /dev/targetSD
hostController="$(readlink /dev/block/by-name/super |sed -E 's;/dev/(.*)p[0-9]*;\1;g')"
sdcard=""
for k in $(seq 1 15);do
    for i in $(find /dev -name 'mmcblk*p1');do
        if echo "$i" |grep -v -q "$hostController";then
            sdcard="$i"
        fi
    done
    [ -n "$sdcard" ] && break
    sleep 1
done
if ! $foundTarget && [ -n "$sdcard" ] && [ -b "$sdcard" ];then
    mkdir /dev/mntSD
    mount -o rw "$sdcard" /dev/mntSD
    if [ -f /dev/mntSD/Diverter/system.img ];then
        if [ ! -f /dev/mntSD/Diverter/userdata.img ];then
            fallocate -l 8G /dev/mntSD/Diverter/userdata.img
            mke2fs -t ext4 -b 4096 -O uninit_bg /dev/mntSD/Diverter/userdata.img
        fi
        mount -o ro,loop /dev/mntSD/Diverter/system.img /dev/targetSD
    fi
fi

vibrate() {
    duration="$1"
    if [ -f /sys/devices/virtual/timed_output/vibrator/enable ];then
        echo -n $1 > /sys/devices/virtual/timed_output/vibrator/enable
    elif [ -f /sys/class/leds/vibrator/duration ];then
        echo $1 > /sys/class/leds/vibrator/duration
        echo 1 > /sys/class/leds/vibrator/activate
    fi
}

# Say hello to the user
vibrate 100
sleep .2
vibrate 100
sleep .2
vibrate 100

timeout 10 input-waiter > /dev/choice

if grep UP /dev/choice;then
    mount -o move /dev/targetInternal /target
    foundTarget=true
fi
if grep DOWN /dev/choice;then
    mount -o move /dev/targetSD /target
    foundTarget=true
    target=sdcard
fi

if $foundTarget;then
    mount -o move /target_tmp/apex /target/apex
    mount -o move /target_tmp/dev /target/dev
    mount -o move /target_tmp/proc /target/proc
    mount -o move /target_tmp/sys /target/sys
    mount -o move /target_tmp/mnt /target/mnt
    mount -o move /target_tmp/debug_ramdisk /target/debug_ramdisk
    mount -o move /target_tmp/metadata /target/metadata
    mount -o move /target_tmp/vendor /target/vendor
    mount -o move /target_tmp/odm /target/odm
    mount -o move /target_tmp/apex /target/apex
    mount -o move /target_tmp/prism /target/prism
    mount -o move /target_tmp/optics /target/optics
    #TODO: Other mount points for non-GSI (system_ext? product?)

    if [ "$target" = "sdcard" ] && [ -f /dev/mntSD/Diverter/product.img ];then
        umount /target/product
        mount -o ro,loop /dev/mntSD/Diverter/product.img /target/product
    fi
fi

# UNCOMMENTME: To grab kernel logs to ttyGS0 you'll need SELinux permissive
#(cat /proc/cmdline |sed -E 's/androidboot.selinux=[^ ]*//g' |tr -d '\n'; echo " " androidboot.selinux=permissive ) > /dev/cmdline
#chmod 0400 /dev/cmdline
#mount -o bind /dev/cmdline /target/proc/cmdline

# UNCOMMENTME: To have unauthenticated adb
# cp /target/vendor/default.prop /dev/vendor_default.prop
# sed -i -e '/adb.secure/d' /dev/vendor_default.prop
# chmod 0400 /dev/vendor_default.prop
# mount -o bind /dev/vendor_default.prop /target/vendor/default.prop

if grep DOWN /dev/choice;then
    # Patch sepolicy
    mkdir -p /dev/selinux
    cp /target/system/etc/selinux/plat_sepolicy.cil /dev/selinux/
    # Allow kernel to read / write unlabeled files for our loop mount to work
    echo "(allow kernel unlabeled (file (read write create)))" >> /dev/selinux/plat_sepolicy.cil
    mount -o bind /dev/selinux/plat_sepolicy.cil /target/system/etc/selinux/plat_sepolicy.cil

    # Patch sepolicy file_contexts to label our userdata loop device correctly
    # This is required for FBE (otherwise vdc will fail)
    cp /target/system/etc/selinux/plat_file_contexts /dev/selinux/
    echo "/dev/block/sd_userdata    u:object_r:userdata_block_device:s0" >> /dev/selinux/plat_file_contexts
    mount -o bind /dev/selinux/plat_file_contexts /target/system/etc/selinux/plat_file_contexts

    # Create loop device for userdata on sdcard
    mkdir -p /target/dev/block/
    mknod -m 0660 /target/dev/block/sd_userdata b 7 8
    losetup /target/dev/block/sd_userdata /dev/mntSD/Diverter/userdata.img

    mkdir -p /dev/fstabs
    for fstab in $(cd /target/vendor/etc/; echo fstab*);do
        cp /target/vendor/etc/$fstab /dev/fstabs/$fstab
        sed -i /sdcard/d /dev/fstabs/$fstab
        sed -i -E -e 's;([^ ]*)(.*/data\b.*);/dev/block/sd_userdata \2;g' /dev/fstabs/$fstab
        sed -i -E -e '/sd_userdata/s;f2fs;ext4;g' /dev/fstabs/$fstab
        sed -i -E -e '/sd_userdata/s;fsync_mode=nobarrier,reserve_root=32768,;;g' /dev/fstabs/$fstab
        # TODO: figure out why FBE is broken
        #sed -i -E -e '/sd_userdata/s;,fileencryption=.*;;g' /dev/fstabs/$fstab
        sed -i '/product/d' /dev/fstabs/$fstab
    done

    mke2fs /dev/ram0
    #echo '/.* u:object_r:vendor_file:s0' > /dev/file_contexts
    echo '/.* u:object_r:vendor_configs_file:s0' > /dev/file_contexts
    e2fsdroid -S /dev/file_contexts -f /dev/fstabs -e -a / -u '0 0 1' /dev/ram0
    mkdir /dev/mntRAM
    mount /dev/ram0 /dev/mntRAM
    for fstab in $(cd /target/vendor/etc/; echo fstab*);do
        mount -o bind /dev/mntRAM/$fstab /target/vendor/etc/$fstab
    done
fi

# Disable /dev/kmsg rate limiting
echo on > /proc/sys/kernel/printk_devkmsg

if ! grep -q -e DOWN -e UP /dev/choice;then
    touch /dev/wait-boot
fi
while [ -f /dev/wait-boot ];do
    sleep 1
done
touch /dev/booting

[ -f /dev/do-boot ] && source /dev/do-boot

pkill -f mdev

cat /dev/kmsg > /dev/ttyGS0 &

sleep 5

# COMMENTME: To grab kernel logs to ttyGS0 you need to keep usb gadget open
echo > $gadget/UDC
rm $gadget/configs/c.1/f4
rm $gadget/configs/c.1/f3
rm $gadget/configs/c.1/f2
rm $gadget/configs/c.1/f1
rmdir $gadget/configs/c.1/strings/0x409/
rmdir $gadget/configs/c.1/strings/0x409
rmdir $gadget/configs/c.1
rmdir $gadget/configs/c.1/
# END OF COMMENTME

echo HAHA > /dev/kmsg
cd /target
echo HIHI > /dev/kmsg
pivot_root /target debug_ramdisk
echo HEHE > /dev/kmsg

unset PATH
exec /debug_ramdisk/bin/busybox chroot . /system/bin/init selinux_setup > /dev/kmsg

#telnetd -F

sleep 30
reboot
