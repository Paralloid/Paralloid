#!/bin/sh

set -x

export PATH=/bin:/sbin

mount -o move /dev /target_tmp/dev
mount -o move /proc /target_tmp/proc
mount -o move /sys /target_tmp/sys
mount -o move /mnt /target_tmp/mnt
mount -o move /debug_ramdisk /target_tmp/debug_ramdisk
mount -o move /metadata /target_tmp/metadata
mount -o move /vendor /target_tmp/vendor
mount -o move /odm /target_tmp/odm
mount -o move /apex /target_tmp/apex
mount -o move /prism /target_tmp/prism
mount -o move /optics /target_tmp/optics
#TODO: Other mount points for non-GSI (system_ext? product?) + Device-specific (prism,optics)

mount -t proc none /proc
mount -t sysfs none /sys
mount -t configfs none /config
mount -t tmpfs none /dev
mount -t tmpfs none /tmp
mount -t pstore none /sys/fs/pstore

mdev -s
mdev -d

gadget=/config/usb_gadget/g1
echo > $gadget/UDC
rm -Rf $gadget/configs
rm -Rf $gadget/configs
mkdir $gadget
echo 0x12d1 > $gadget/idVendor
echo 0x103A > $gadget/idProduct
#echo 0x18d1 > $gadget/idVendor
#echo 0x4ee0 > $gadget/idProduct
echo 12D1 > /sys/class/android_usb/android0/idVendor
echo 103A > /sys/class/android_usb/android0/idProduct
#echo 18D1 > /sys/class/android_usb/android0/idVendor
#echo 4EE0 > /sys/class/android_usb/android0/idProduct
echo phh > /sys/class/android_usb/android0/iManufacturer
echo phh > /sys/class/android_usb/android0/iProduct
# Some MTK devices won't change serialnumber once it has been set
# so set it to the correct value from the very beginning (if we can)
serialnumber=$(cat /proc/cmdline | grep -o "androidboot.serialno=[a-zA-Z0-9]*" | cut -c 22-)
if [ -z "$serialnumber" ];then
    serialnumber=phh
fi
echo "$serialnumber" > /sys/class/android_usb/android0/iSerial
mkdir -p $gadget/strings/0x409
echo "$serialnumber" > $gadget/strings/0x409/serialnumber
echo phh > $gadget/strings/0x409/manufacturer
echo phh > $gadget/strings/0x409/product

# Configure the gadget with all the functions
mkdir $gadget/configs/c.1/
mkdir $gadget/configs/c.1/strings/0x409
# This name is important, see SM-A515F's kernel source, drivers/usb/gadget/configfs.c @check_symboliclink_change_mode
echo 'Conf 1' > $gadget/configs/c.1/strings/0x409/configuration

gadgetNr=1
addGadget() {
    d=$gadget/functions/${1}
    t=$gadget/configs/c.1/f$gadgetNr
    mkdir $d
    if [ -d $d ];then
        echo "Adding $d to $t" > /dev/kmsg
        if ln -s $d $t;then
            echo ...Succeeded > /dev/kmsg
        else
            sh -c "mkdir $d; mkdir $gadget/configs/c.1; ln -s $d $t" > /dev/kmsg 2>&1
            echo ...Failed > /dev/kmsg
        fi
        gadgetNr=$((gadgetNr+1))
    else
        echo "Failed adding $d" > /dev/kmsg
    fi
}

addGadget acm.0
addGadget rndis.0

# Setup mass_storage with current dmesg + pstore
addGadget mass_storage.0
echo 1 > $gadget/functions/mass_storage.0/lun.0/removable
dmesg > /tmp/tmp-img
cat /sys/fs/pstore/* >> /tmp/tmp-img
echo /tmp/tmp-img > $gadget/functions/mass_storage.0/lun.0/file

# Disable watchdogs
echo -n V > /dev/watchdog
echo -n V > /dev/watchdog0
echo -n V > /dev/watchdog1
echo 0 > /proc/sys/kernel/hung_task_timeout_secs

#echo > $gadget/UDC
echo acm,rndis,fastboot > /sys/class/android_usb/android0/functions
echo fastboot > /sys/class/android_usb/android0/f_ffs/aliases

# Enable fastboot function
mkdir $gadget/functions/ffs.fastboot
mkdir -p /dev/usb-ffs/fastboot
mount -t functionfs fastboot /dev/usb-ffs/fastboot

# Enable USB in order to call minfastbootd to initialize FunctionFS
echo 1 > /sys/devices/virtual/android_usb/android0/enable

# We must initialize FunctionFS with minfastbootd before adding the fastboot gadget
# This ordering is important, as otherwise the ffs.fastboot gadget will be ignored
minfastbootd > /dev/kmsg 2>&1 &

ffs_wait_count=0
while [ ! -f /dev/.ffs_ready ];do
    sleep 1
    ffs_wait_count=$((ffs_wait_count+1))
    if [ $ffs_wait_count -ge 10 ];then
        # Don't wait forever; if it didn't work in 10 seconds, abort
        break
    fi
done
addGadget ffs.fastboot
# Important: $gadget/UDC must be set *after* all gadgets are added and *after* FunctionFS
# is initialized. Otherwise, any function added after setting $gadget/UDC will be ignored
ls /sys/class/udc | head -n 1  | cat > $gadget/UDC

ifconfig -a

ifconfig lo 127.0.0.1 up
ifconfig ncm0 192.168.2.3 up
ifconfig usb0 192.168.2.3 up
ifconfig rndis0 192.168.2.3 up
ifconfig $(cat $gadget/functions/ncm.0/ifname) 192.168.2.3 up

(
set +x
while ! [ -f /dev/booting ];do
echo > $gadget/functions/mass_storage.0/lun.0/file
dmesg > /tmp/tmp-img
cat /sys/fs/pstore/* >> /tmp/tmp-img
echo /tmp/tmp-img > $gadget/functions/mass_storage.0/lun.0/file
sleep 2
done) &

(
while ! [ -f /dev/booting ];do
    sh <> /dev/ttyGS0 >&0 2>&1
done
) &

refreshMapper() {
    mkdir -p /dev/block/mapper
    ln -s /dev/mapper/control /dev/device-mapper
    for i in $(cd /sys/devices/virtual/block/; echo dm-*);do
        name=$(cat /sys/devices/virtual/block/$i/dm/name)
        ln -sf /dev/$i /dev/block/mapper/$name
    done
}

refreshMapper

PARTNAME=""
DEVNAME=""
mkdir -p /dev/block/by-name
for i in $(cd /sys/dev/block; echo *);do
    U=/sys/dev/block/$i/uevent
    PARTNAME=$(sed -nE 's/PARTNAME=//p' $U)
    DEVNAME=$(sed -nE 's/DEVNAME=//p' $U)
    if [ -n "$PARTNAME" ] && [ -n "$DEVNAME" ];then
        ln -s /dev/$DEVNAME /dev/block/by-name/$PARTNAME
    fi
    PARTNAME=""
    DEVNAME=""
done

hostController="$(readlink /dev/block/by-name/super |sed -E 's;/dev/(.*)p[0-9]*;\1;g')"
sdcard=""
for k in $(seq 1 15);do
    for i in $(find /dev -name 'mmcblk*p1');do
        if echo "$i" |grep -v -q "$hostController";then
            sdcard="$i"
        fi
    done
    [ -n "$sdcard" ] && break
    sleep 1
done
if [ -n "$sdcard" ] && [ -b "$sdcard" ];then
    mkdir /dev/mntSD
    mount -o rw "$sdcard" /dev/mntSD
fi

# Mount userdata too (without decryption)
mkdir /dev/mntDATA
mount -o rw /dev/block/by-name/userdata /dev/mntDATA

# Launch the boot-diverter UI
exec /bin/diverter > /dev/kmsg 2>&1
