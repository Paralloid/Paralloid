#!/bin/sh

set -x

export PATH=/bin:/sbin

# Mount a tmpfs on /target_tmp so that we can create mountpoints as needed
mount -t tmpfs none /target_tmp

# Note: we cannot move /sys to /target_tmp/sys, because
# bionic libc wants at least one of /dev/null and /sys/fs/selinux/null
# otherwise it segfaults. Moving /sys here will cause all the following
# commands to break. Using recursive bind mount copies the mount tree,
# preserving the original one, which should make it safe.
MOVE_MOUNT_RBIND_DIRS="sys" move_mount_tree / /target_tmp

# Re-mount some of the filesystems we just moved
# We don't need to mount /sys because we used --rbind
mount -t proc none /proc
mount -t configfs none /config
mount -t tmpfs none /dev
mount -t tmpfs none /tmp
mount -t pstore none /sys/fs/pstore

mdev -s
mdev -d

gadget=/config/usb_gadget/g1
echo > $gadget/UDC
rm -Rf $gadget/configs
rm -Rf $gadget/configs
mkdir $gadget
# Use Android's default bootloader device ID
echo 0x18d1 > $gadget/idVendor
echo 0x4ee0 > $gadget/idProduct
echo 18D1 > /sys/class/android_usb/android0/idVendor
echo 4EE0 > /sys/class/android_usb/android0/idProduct
echo Paralloid > /sys/class/android_usb/android0/iManufacturer
echo Paralloid > /sys/class/android_usb/android0/iProduct
# Some MTK devices won't change serialnumber once it has been set
# so set it to the correct value from the very beginning (if we can)
serialnumber=$(cat /proc/cmdline | grep -o "androidboot.serialno=[a-zA-Z0-9]*" | cut -c 22-)
if [ -z "$serialnumber" ];then
    serialnumber=paralloid
fi
echo "$serialnumber" > /sys/class/android_usb/android0/iSerial
mkdir -p $gadget/strings/0x409
echo "$serialnumber" > $gadget/strings/0x409/serialnumber
echo Paralloid > $gadget/strings/0x409/manufacturer
echo Paralloid > $gadget/strings/0x409/product

# Configure the gadget with all the functions
mkdir $gadget/configs/c.1/
mkdir $gadget/configs/c.1/strings/0x409
# This name is important, see SM-A515F's kernel source, drivers/usb/gadget/configfs.c @check_symboliclink_change_mode
echo 'Conf 1' > $gadget/configs/c.1/strings/0x409/configuration

gadgetNr=1
addGadget() {
    d=$gadget/functions/${1}
    t=$gadget/configs/c.1/f$gadgetNr
    mkdir $d
    if [ -d $d ];then
        echo "Adding $d to $t" > /dev/kmsg
        if ln -s $d $t;then
            echo ...Succeeded > /dev/kmsg
        else
            sh -c "mkdir $d; mkdir $gadget/configs/c.1; ln -s $d $t" > /dev/kmsg 2>&1
            echo ...Failed > /dev/kmsg
        fi
        gadgetNr=$((gadgetNr+1))
    else
        echo "Failed adding $d" > /dev/kmsg
    fi
}

addGadget acm.0
addGadget rndis.0

# Setup mass_storage with current dmesg + pstore
addGadget mass_storage.0
echo 1 > $gadget/functions/mass_storage.0/lun.0/removable
dmesg > /tmp/tmp-img
cat /sys/fs/pstore/* >> /tmp/tmp-img
echo /tmp/tmp-img > $gadget/functions/mass_storage.0/lun.0/file

# Disable watchdogs
echo -n V > /dev/watchdog
echo -n V > /dev/watchdog0
echo -n V > /dev/watchdog1
echo 0 > /proc/sys/kernel/hung_task_timeout_secs

#echo > $gadget/UDC
echo acm,rndis,fastboot > /sys/class/android_usb/android0/functions
echo fastboot > /sys/class/android_usb/android0/f_ffs/aliases

# Enable fastboot function
mkdir $gadget/functions/ffs.fastboot
mkdir -p /dev/usb-ffs/fastboot
mount -t functionfs fastboot /dev/usb-ffs/fastboot

# Enable USB in order to call minfastbootd to initialize FunctionFS
echo 1 > /sys/devices/virtual/android_usb/android0/enable

# We must initialize FunctionFS with minfastbootd before adding the fastboot gadget
# This ordering is important, as otherwise the ffs.fastboot gadget will be ignored
minfastbootd > /dev/kmsg 2>&1 &

ffs_wait_count=0
while [ ! -f /dev/.ffs_ready ];do
    sleep 1
    ffs_wait_count=$((ffs_wait_count+1))
    if [ $ffs_wait_count -ge 10 ];then
        # Don't wait forever; if it didn't work in 10 seconds, abort
        break
    fi
done
addGadget ffs.fastboot
# Important: $gadget/UDC must be set *after* all gadgets are added and *after* FunctionFS
# is initialized. Otherwise, any function added after setting $gadget/UDC will be ignored
ls /sys/class/udc | head -n 1  | cat > $gadget/UDC

ifconfig -a

ifconfig lo 127.0.0.1 up
ifconfig ncm0 192.168.2.3 up
ifconfig usb0 192.168.2.3 up
ifconfig rndis0 192.168.2.3 up
ifconfig $(cat $gadget/functions/ncm.0/ifname) 192.168.2.3 up

(
set +x
while ! [ -f /dev/booting ];do
echo > $gadget/functions/mass_storage.0/lun.0/file
dmesg > /tmp/tmp-img
cat /sys/fs/pstore/* >> /tmp/tmp-img
echo /tmp/tmp-img > $gadget/functions/mass_storage.0/lun.0/file
sleep 2
done) &

(
while ! [ -f /dev/booting ];do
    sh <> /dev/ttyGS0 >&0 2>&1
done
) &

refreshMapper() {
    mkdir -p /dev/block/mapper
    ln -s /dev/mapper/control /dev/device-mapper
    for i in $(cd /sys/devices/virtual/block/; echo dm-*);do
        name=$(cat /sys/devices/virtual/block/$i/dm/name)
        ln -sf /dev/$i /dev/block/mapper/$name
    done
}

refreshMapper

PARTNAME=""
DEVNAME=""
mkdir -p /dev/block/by-name
for i in $(cd /sys/dev/block; echo *);do
    U=/sys/dev/block/$i/uevent
    PARTNAME=$(sed -nE 's/PARTNAME=//p' $U)
    DEVNAME=$(sed -nE 's/DEVNAME=//p' $U)
    if [ -n "$PARTNAME" ] && [ -n "$DEVNAME" ];then
        ln -s /dev/$DEVNAME /dev/block/by-name/$PARTNAME
    fi
    PARTNAME=""
    DEVNAME=""
done

hostController="$(readlink /dev/block/by-name/super |sed -E 's;/dev/(.*)p[0-9]*;\1;g')"
sdcard=""
for k in $(seq 1 15);do
    for i in $(find /dev -name 'mmcblk*p1');do
        if echo "$i" |grep -v -q "$hostController";then
            sdcard="$i"
        fi
    done
    [ -n "$sdcard" ] && break
    sleep 1
done
if [ -n "$sdcard" ] && [ -b "$sdcard" ];then
    mkdir /dev/mntSD
    mount -o rw "$sdcard" /dev/mntSD
    if [ $? -eq 0 ];then
        touch /dev/.sdcard_mounted
    fi
fi

# Mount userdata too (without decryption)
mkdir /dev/mntDATA
mount -o ro /dev/block/by-name/userdata /dev/mntDATA
# Only ever mount data as R/W when the system has already written
# to the data partition. Otherwise, the internal system partition
# will fail to boot.
# TODO: What if the user does not want to use the internal system
# partition anymore? For example, on devices without dynamic partitions.
# We should allow the user to write custom images to userdata anyway.
if [ -d /dev/mntDATA/unencrypted ];then
    mount -o remount,rw /dev/mntDATA
    touch /dev/.userdata_mounted
else
    # The internal system partition can only initialize encrypted userdata
    # when it is not mounted.
    umount /dev/mntDATA
fi

# Launch the Paralloid UI
/bin/paralloid_ui > /dev/kmsg 2>&1 &

# Wait until we are notified to boot by the UI
while [ ! -f /dev/.paralloid_boot_target ];do
    sleep 1
done

# The UI has notified us to continue booting; fetch the target
# from the marker file
TARGET="$(cat /dev/.paralloid_boot_target)"
TARGET_DIR=$(dirname $TARGET)

if [ $TARGET == "internal" ];then
    mount -o ro /dev/block/mapper/system_orig /target
    # Note: the other system mountpoints, if present as first stage mounts, will be
    # moved back by the next move_mount_tree command. There is no need to do anything
    # here specifically for them.
else
    # Create userdata image if it doesn't exist yet
    if [ ! -f "$TARGET_DIR/userdata.img" ];then
        # Test if the target filesystem supports fallocate by allocating a small file
        fallocate -l 1M $TARGET_DIR/test_fallocate.img
        if [ $? -ne 0 ];then
            # Fall back to dd if `fallocate` failed
            dd if=/dev/zero of=$TARGET_DIR/userdata.img bs=$((1024*1024)) count=8k
        else
            fallocate -l 8G $TARGET_DIR/userdata.img
        fi
        # Remove the temporary file
        rm $TARGET_DIR/test_fallocate.img
        # Call the same script in /bin that the diverter UI uses
        format-userdata-image $TARGET_DIR/userdata.img
    fi
    
    # Remove the default system partition mountpoints -- if these are needed, they
    # shall be flashed as images in their respective directory
    umount /target_tmp/system_ext
    umount /target_tmp/product
    
    # Mount the system images
    mount -o ro,loop $TARGET /target
    
    if [ -f "$TARGET_DIR/product.img" ];then
        umount /target/product
        mount -o ro,loop $TARGET_DIR/product.img /target/product
    fi
fi

# Handle force_debuggable / adb_debug.prop
if [ -f /dev/.paralloid_force_debuggable ];then
    # Without this, `init` on Q does not read /debug_ramdisk/adb_debug.prop
    export INIT_FORCE_DEBUGGABLE=true
else
    # Overwrite our adb_debug.prop with nothing
    mount -o bind /dev/null /adb_debug.prop
fi

# Move all first stage mountpoints to the new root (excluding those that
# we explicitly unmounted)
move_mount_tree /target_tmp /target

if [ $TARGET != "internal" ];then
    # Create loop device for userdata on sdcard
    mkdir -p /target/dev/block/
    # Minor code / 8 correspond to the ID of the loop device.
    # Set it to 256 so that nothing else may conflict with ours
    mknod -m 0660 /target/dev/block/sd_userdata b 7 256
    losetup /target/dev/block/sd_userdata $TARGET_DIR/userdata.img

    # Force the system to reload sepolicy instead of using precompiled_sepolicy
    # by overriding the sha256 checksum files
    # This facilitates the sepolicy patching process below
    for partition in system product;do
      policy_name=$partition
      if [ $partition = system ];then
        policy_name=plat
      fi

      if [ -f /target/$partition/etc/selinux/${policy_name}_sepolicy_and_mapping.sha256 ];then
        mount -o bind /dev/null /target/$partition/etc/selinux/${policy_name}_sepolicy_and_mapping.sha256
      fi
    done

    # Create a temporary directory to store our overrides
    # We will apply the correct SELinux labels in bulk later
    mkdir -p /dev/override

    # Patch sepolicy
    mkdir -p /dev/override/selinux
    cp /target/system/etc/selinux/plat_sepolicy.cil /dev/override/selinux/
    # Allow kernel to read / write unlabeled files for our loop mount to work
    echo "(allow kernel unlabeled (file (read write)))" >> /dev/override/selinux/plat_sepolicy.cil
    # Allow kernel to read / write unencrypted_data_file for booting from /data/unencrypted/
    echo "(allow kernel unencrypted_data_file (file (read write)))" >> /dev/override/selinux/plat_sepolicy.cil
    # Allow kernel to read / write tmpfs files for our ramdisk to work
    echo "(allow kernel tmpfs (file (read write)))" >> /dev/override/selinux/plat_sepolicy.cil

    # Patch sepolicy file_contexts to label our userdata loop device correctly
    # This is required for FBE (otherwise vdc will fail)
    cp /target/system/etc/selinux/plat_file_contexts /dev/override/selinux/
    echo "/dev/block/sd_userdata    u:object_r:userdata_block_device:s0" >> /dev/override/selinux/plat_file_contexts

    mkdir -p /dev/override/fstabs
    for fstab in $(cd /target/vendor/etc/; echo fstab*);do
        cp /target/vendor/etc/$fstab /dev/override/fstabs/$fstab
        sed -i /sdcard/d /dev/override/fstabs/$fstab
        sed -i -E -e 's;([^ ]*)(.*/data[[:>:]].*);/dev/block/sd_userdata \2;g' /dev/override/fstabs/$fstab
        sed -i -E -e '/sd_userdata/s;f2fs;ext4;g' /dev/override/fstabs/$fstab
        sed -i -E -e '/sd_userdata/s;fsync_mode=nobarrier,reserve_root=32768,;;g' /dev/override/fstabs/$fstab
        sed -i '/product/d' /dev/override/fstabs/$fstab
    done

    # Label the overridden files with the correct SELinux contexts using an in-memory fs
    # /dev/ram0 may not be enough for sepolicy on some devices; it cannot always be grown,
    # so just create our own ramdisk image
    dd if=/dev/zero of=/dev/ramdisk.img bs=1k count=20480
    mke2fs /dev/ramdisk.img
    # Default context for everything in the ramdisk (including directories)
    # If missing, e2fsdroid will abort and leave the filesystem corrupted
    echo '/.* u:object_r:tmpfs:s0' > /dev/file_contexts
    # fstab context
    echo '/fstabs/.* u:object_r:vendor_configs_file:s0' >> /dev/file_contexts
    # sepolicy configuration contexts
    echo '/selinux/plat_file_contexts u:object_r:file_contexts_file:s0' >> /dev/file_contexts
    echo '/selinux/plat_sepolicy.cil u:object_r:sepolicy_file:s0' >> /dev/file_contexts
    # Populate the temporary fs & apply the contexts
    e2fsdroid -S /dev/file_contexts -f /dev/override -e -a / -u '0 0 1' /dev/ramdisk.img
    mkdir /dev/mntRAM
    mount /dev/ramdisk.img /dev/mntRAM
    # Actually apply the fstab override
    for fstab in $(cd /target/vendor/etc/; echo fstab*);do
        mount -o bind /dev/mntRAM/fstabs/$fstab /target/vendor/etc/$fstab
    done
    # Actually apply the sepolicy override
    mount -o bind /dev/mntRAM/selinux/plat_file_contexts /target/system/etc/selinux/plat_file_contexts
    mount -o bind /dev/mntRAM/selinux/plat_sepolicy.cil /target/system/etc/selinux/plat_sepolicy.cil
fi

# UNCOMMENTME: To grab kernel logs to ttyGS0 you'll need SELinux permissive
#(cat /proc/cmdline |sed -E 's/androidboot.selinux=[^ ]*//g' |tr -d '\n'; echo " " androidboot.selinux=permissive ) > /dev/cmdline
#chmod 0400 /dev/cmdline
#mount -o bind /dev/cmdline /target/proc/cmdline

# Disable /dev/kmsg rate limiting
echo on > /proc/sys/kernel/printk_devkmsg

touch /dev/booting
[ -f /dev/do-boot ] && source /dev/do-boot

pkill -f mdev

cat /dev/kmsg > /dev/ttyGS0 &

# Stop minfastbootd and remove usb functionfs
pkill -f minfastbootd
umount /dev/usb-ffs/fastboot

# COMMENTME: To grab kernel logs to ttyGS0 you need to keep usb gadget open
echo > $gadget/UDC
rm $gadget/configs/c.1/f4
rm $gadget/configs/c.1/f3
rm $gadget/configs/c.1/f2
rm $gadget/configs/c.1/f1
rmdir $gadget/configs/c.1/strings/0x409/
rmdir $gadget/configs/c.1/strings/0x409
rmdir $gadget/configs/c.1
rmdir $gadget/configs/c.1/
# END OF COMMENTME

echo HAHA > /dev/kmsg
cd /target
echo HIHI > /dev/kmsg
pivot_root /target debug_ramdisk
echo HEHE > /dev/kmsg

unset PATH
exec /debug_ramdisk/bin/busybox chroot . /system/bin/init selinux_setup > /dev/kmsg

#telnetd -F

sleep 30
reboot
