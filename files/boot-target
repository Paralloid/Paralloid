#!/bin/sh

if [ ! -f /dev/.paralloid_boot_target ];then
    exit 1
fi

TARGET="$(cat /dev/.paralloid_boot_target)"
TARGET_DIR=$(dirname $TARGET)

if [ $TARGET == "internal" ];then
    mount -o ro /dev/block/mapper/system_orig /target
else
    # Create userdata image if it doesn't exist yet
    if [ ! -f "$TARGET_DIR/userdata.img" ];then
        # Test if the target filesystem supports fallocate by allocating a small file
        fallocate -l 1M $TARGET_DIR/test_fallocate.img
        if [ $? -ne 0 ];then
            # Fall back to dd if `fallocate` failed
            dd if=/dev/zero of=$TARGET_DIR/userdata.img bs=$((1024*1024)) count=8k
        else
            fallocate -l 8G $TARGET_DIR/userdata.img
        fi
        # Remove the temporary file
        rm $TARGET_DIR/test_fallocate.img
        # Call the same script in /bin that the diverter UI uses
        format-userdata-image $TARGET_DIR/userdata.img
    fi
    
    # Mount the system images
    mount -o ro,loop $TARGET /target
    
    if [ -f "$TARGET_DIR/product.img" ];then
        umount /target/product
        mount -o ro,loop $TARGET_DIR/product.img /target/product
    fi
fi

# Handle force_debuggable / adb_debug.prop
if [ "$DIVERTER_FORCE_DEBUGGABLE" == "1" ];then
    # Without this, `init` on Q does not read /debug_ramdisk/adb_debug.prop
    export INIT_FORCE_DEBUGGABLE=true
else
    # Overwrite our adb_debug.prop with nothing
    mount -o bind /dev/null /adb_debug.prop
fi

# Undo what we did in `init`
mount -o move /target_tmp/apex /target/apex
mount -o move /target_tmp/dev /target/dev
mount -o move /target_tmp/proc /target/proc
mount -o move /target_tmp/sys /target/sys
mount -o move /target_tmp/mnt /target/mnt
mount -o move /target_tmp/debug_ramdisk /target/debug_ramdisk
mount -o move /target_tmp/metadata /target/metadata
mount -o move /target_tmp/vendor /target/vendor
mount -o move /target_tmp/odm /target/odm
mount -o move /target_tmp/apex /target/apex
mount -o move /target_tmp/prism /target/prism
mount -o move /target_tmp/optics /target/optics
#TODO: Other mount points for non-GSI (system_ext? product?)

if [ $TARGET != "internal" ];then
    # Create loop device for userdata on sdcard
    mkdir -p /target/dev/block/
    # Minor code / 8 correspond to the ID of the loop device.
    # Set it to 256 so that nothing else may conflict with ours
    mknod -m 0660 /target/dev/block/sd_userdata b 7 256
    losetup /target/dev/block/sd_userdata $TARGET_DIR/userdata.img

    # Force the system to reload sepolicy instead of using precompiled_sepolicy
    # by overriding the sha256 checksum files
    # This facilitates the sepolicy patching process below
    for partition in system product;do
      policy_name=$partition
      if [ $partition = system ];then
        policy_name=plat
      fi

      if [ -f /target/$partition/etc/selinux/${policy_name}_sepolicy_and_mapping.sha256 ];then
        mount -o bind /dev/null /target/$partition/etc/selinux/${policy_name}_sepolicy_and_mapping.sha256
      fi
    done

    # Create a temporary directory to store our overrides
    # We will apply the correct SELinux labels in bulk later
    mkdir -p /dev/override

    # Patch sepolicy
    mkdir -p /dev/override/selinux
    cp /target/system/etc/selinux/plat_sepolicy.cil /dev/override/selinux/
    # Allow kernel to read / write unlabeled files for our loop mount to work
    echo "(allow kernel unlabeled (file (read write)))" >> /dev/override/selinux/plat_sepolicy.cil
    # Allow kernel to read / write unencrypted_data_file for booting from /data/unencrypted/
    echo "(allow kernel unencrypted_data_file (file (read write)))" >> /dev/override/selinux/plat_sepolicy.cil
    # Allow kernel to read / write tmpfs files for our ramdisk to work
    echo "(allow kernel tmpfs (file (read write)))" >> /dev/override/selinux/plat_sepolicy.cil

    # Patch sepolicy file_contexts to label our userdata loop device correctly
    # This is required for FBE (otherwise vdc will fail)
    cp /target/system/etc/selinux/plat_file_contexts /dev/override/selinux/
    echo "/dev/block/sd_userdata    u:object_r:userdata_block_device:s0" >> /dev/override/selinux/plat_file_contexts

    mkdir -p /dev/override/fstabs
    for fstab in $(cd /target/vendor/etc/; echo fstab*);do
        cp /target/vendor/etc/$fstab /dev/override/fstabs/$fstab
        sed -i /sdcard/d /dev/override/fstabs/$fstab
        sed -i -E -e 's;([^ ]*)(.*/data[[:>:]].*);/dev/block/sd_userdata \2;g' /dev/override/fstabs/$fstab
        sed -i -E -e '/sd_userdata/s;f2fs;ext4;g' /dev/override/fstabs/$fstab
        sed -i -E -e '/sd_userdata/s;fsync_mode=nobarrier,reserve_root=32768,;;g' /dev/override/fstabs/$fstab
        sed -i '/product/d' /dev/override/fstabs/$fstab
    done

    # Label the overridden files with the correct SELinux contexts using an in-memory fs
    # /dev/ram0 may not be enough for sepolicy on some devices; it cannot always be grown,
    # so just create our own ramdisk image
    dd if=/dev/zero of=/dev/ramdisk.img bs=1k count=20480
    mke2fs /dev/ramdisk.img
    # Default context for everything in the ramdisk (including directories)
    # If missing, e2fsdroid will abort and leave the filesystem corrupted
    echo '/.* u:object_r:tmpfs:s0' > /dev/file_contexts
    # fstab context
    echo '/fstabs/.* u:object_r:vendor_configs_file:s0' >> /dev/file_contexts
    # sepolicy configuration contexts
    echo '/selinux/plat_file_contexts u:object_r:file_contexts_file:s0' >> /dev/file_contexts
    echo '/selinux/plat_sepolicy.cil u:object_r:sepolicy_file:s0' >> /dev/file_contexts
    # Populate the temporary fs & apply the contexts
    e2fsdroid -S /dev/file_contexts -f /dev/override -e -a / -u '0 0 1' /dev/ramdisk.img
    mkdir /dev/mntRAM
    mount /dev/ramdisk.img /dev/mntRAM
    # Actually apply the fstab override
    for fstab in $(cd /target/vendor/etc/; echo fstab*);do
        mount -o bind /dev/mntRAM/fstabs/$fstab /target/vendor/etc/$fstab
    done
    # Actually apply the sepolicy override
    mount -o bind /dev/mntRAM/selinux/plat_file_contexts /target/system/etc/selinux/plat_file_contexts
    mount -o bind /dev/mntRAM/selinux/plat_sepolicy.cil /target/system/etc/selinux/plat_sepolicy.cil
fi

# UNCOMMENTME: To grab kernel logs to ttyGS0 you'll need SELinux permissive
#(cat /proc/cmdline |sed -E 's/androidboot.selinux=[^ ]*//g' |tr -d '\n'; echo " " androidboot.selinux=permissive ) > /dev/cmdline
#chmod 0400 /dev/cmdline
#mount -o bind /dev/cmdline /target/proc/cmdline

# Disable /dev/kmsg rate limiting
echo on > /proc/sys/kernel/printk_devkmsg

touch /dev/booting
[ -f /dev/do-boot ] && source /dev/do-boot

pkill -f mdev

cat /dev/kmsg > /dev/ttyGS0 &

# Stop minfastbootd and remove usb functionfs
pkill -f minfastbootd
umount /dev/usb-ffs/fastboot

# COMMENTME: To grab kernel logs to ttyGS0 you need to keep usb gadget open
gadget=/config/usb_gadget/g1
echo > $gadget/UDC
rm $gadget/configs/c.1/f4
rm $gadget/configs/c.1/f3
rm $gadget/configs/c.1/f2
rm $gadget/configs/c.1/f1
rmdir $gadget/configs/c.1/strings/0x409/
rmdir $gadget/configs/c.1/strings/0x409
rmdir $gadget/configs/c.1
rmdir $gadget/configs/c.1/
# END OF COMMENTME

echo HAHA > /dev/kmsg
cd /target
echo HIHI > /dev/kmsg
pivot_root /target debug_ramdisk
echo HEHE > /dev/kmsg

unset PATH
exec /debug_ramdisk/bin/busybox chroot . /system/bin/init selinux_setup > /dev/kmsg

#telnetd -F

sleep 30
reboot
